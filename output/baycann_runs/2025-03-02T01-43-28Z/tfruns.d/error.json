{
  "message": "ModuleNotFoundError: No module named '_ctypes'\nRun `reticulate::py_last_error()` for details.",
  "traceback": ["stop(e$message, call. = FALSE)", "on_error(result)", "(function (proxy) \n{\n    if (!py_is_module_proxy(proxy)) \n        return(FALSE)\n    collect_value <- function(name, clear = TRUE) {\n        if (exists(name, envir = proxy, inherits = FALSE)) {\n            value <- get(name, envir = proxy, inherits = FALSE)\n            if (clear) \n                remove(list = name, envir = proxy)\n            value\n        }\n        else {\n            NULL\n        }\n    }\n    get_module <- collect_value(\"get_module\")\n    if (!is.null(get_module)) \n        assign(\"module\", get_module(), envir = proxy)\n    module <- get(\"module\", envir = proxy)\n    before_load <- collect_value(\"before_load\", clear = TRUE)\n    if (is.function(before_load)) \n        before_load()\n    result <- tryCatch(import(module), error = clear_error_handler())\n    if (inherits(result, \"error\")) {\n        on_error <- collect_value(\"on_error\", clear = FALSE)\n        if (!is.null(on_error)) {\n            if (is.function(on_error)) \n                on_error(result)\n            stop(\"Error loading Python module \", module, call. = FALSE)\n        }\n        else {\n            message <- py_config_error_message(paste(\"Python module\", \n                module, \"was not found.\"))\n            stop(message, call. = FALSE)\n        }\n    }\n    collect_value(\"on_error\", clear = TRUE)\n    .globals$delay_load_imports <- NULL\n    py_module_proxy_import(proxy)\n    on_load <- collect_value(\"on_load\", clear = TRUE)\n    if (is.function(on_load)) \n        on_load()\n    TRUE\n})(<environment>)", "py_get_attr(x, name, TRUE)", "`$.python.builtin.module`(keras, \"Input\")", "keras$Input", "do.call(keras$Input, args)", "layer_input(shape = ncol(data_sim_param_train))", "eval(ei, envir)", "eval(ei, envir)", "withVisible(eval(ei, envir))", "tuning_run(file_model, sample = p_hp_sample, runs_dir = file_runs, \n    flags = l_hyperparams, confirm = confirm_hp)"]
}
