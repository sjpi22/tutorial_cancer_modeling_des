---
title: "Cancer Modeling Tutorial"
format: html
editor: visual
bibliography: references.bib
---

# Discrete event simulation tutorial: Application to cancer modeling

## Introduction

### Modeling for cancer screening policy

\[Motivation\] \[Inputs, outputs\] \[Methods\] \[Past examples\]

### Discrete event simulation

-   Idea: sample time to various states for individual patient trajectories
-   \[Pros and cons\]

### Calibration

-   \[How to quantify uncertainty\] \[Why from Bayesian perspective\]

## Default discrete event simulation model

\[Picture of model schema\]

Setup

```{r}
# Run this once
# install.packages("devtools")
# devtools::install_github("carolyner/imabc")

# Clear workspace
rm(list = ls())

# Options
options(scipen=999)

# Load packages
library(readxl)
library(data.table)
library(tidyverse)
library(patchwork)
library(survival)
library(imabc)
library(keras)

# Load functions
distr.sources <- list.files("R", 
                            pattern="*.R$", full.names=TRUE, 
                            ignore.case=TRUE, recursive = TRUE)
sapply(distr.sources, source, .GlobalEnv)
```

Load default parameters

```{r}
# Load default parameters
l_params_all <- load_default_params()

# Make cohort small for testing
l_params_all <- update_param_list(l_params_all,
                                  list(n_cohort = 10000,
                                       v_strats = l_params_all$v_strats[1]))
```

Visualize data inputs: Background mortality and survival from diagnosis

```{r}
# Background mortality
n_mort_ages <- length(l_params_all$time_0_Do_female$params$xs)
df_mort <- data.frame(sex = c(rep("Female", n_mort_ages),
                              rep("Male", n_mort_ages)),
                      yrs = c(l_params_all$time_0_Do_female$params$xs,
                              l_params_all$time_0_Do_male$params$xs),
                      prob = c(1 - c(0, cumsum(l_params_all$time_0_Do_female$params$probs[-n_mort_ages])),
                               1 - c(0, cumsum(l_params_all$time_0_Do_male$params$probs[-n_mort_ages])))
)

plot_mort <- ggplot(df_mort, aes(yrs, prob, color = sex)) + 
  geom_line() + 
  theme_minimal() +
  coord_cartesian(ylim=c(0, 1)) +
  labs(title = "Background mortality",
       x = "Years from birth",
       y = "Proportion alive",
       color = "Sex")

# Survival after diagnosis
df_surv <- data.frame()
for (stg in l_params_all$v_cancer) {
  var <- paste0("time_2", stg, "_Dc")
  n_surv_ages <- length(l_params_all[[var]]$params$xs)
  temp_df_surv <- data.frame(stage = toupper(stg),
                             yrs = l_params_all[[var]]$params$xs,
                             prob = 1 - c(0, cumsum(l_params_all[[var]]$params$probs[-n_surv_ages])))
    
  df_surv <- rbind(df_surv, temp_df_surv)
}

plot_surv <- ggplot(df_surv, aes(yrs, prob, color = stage)) + 
  geom_line() + 
  geom_point(alpha = 0.7) +
  theme_minimal() +
  coord_cartesian(ylim=c(0, 1)) +
  labs(title = "Survival after diagnosis",
       x = "Years from diagnosis",
       y = "Proportion alive",
       color = "Stage at diagnosis")

# Plot together
(plot_mort + plot_surv) + 
  plot_layout(
    ncol = 2,
    guides = "collect",
    axes = "collect",
    axis_titles = "collect"
  ) + plot_annotation(title = 'Known data inputs') &
  theme(legend.position = 'bottom')
```

\[Exercise\] Researchers recently discovered that the disease can be differentiated into early versus late stage and that survival patterns differ by stage. Modify the decision model functions to add this information.

Load priors and run default model

```{r}
# Load priors
param_map <- make_param_map(l_params_all)
prior_path <- 'data/priors.RData'
load(prior_path)

# Update parameters
l_params_min <- update_param_from_map(l_params_all, prior_map$prior_min, param_map)

results_min <- run_model(l_params_min)
results_noscreening_min <- results_min[['None']]

# Update parameters
l_params_max <- update_param_from_map(l_params_all, prior_map$prior_max, param_map)

results_max <- run_model(l_params_max)
results_noscreening_max <- results_max[['None']]
```

Visualize outputs

```{r}
# Weibull distribution
df <- data.frame()
for(a in 2^seq(-1, 4)){
  for(b in 2^seq(-1, 6)){
    x = seq(0, 10, 0.2)
    y = 1 - pweibull(x, shape=a, scale=b)
    df = rbind(df, 
               data.frame(a = paste("Shape =", a),
                          b = factor(b),
                          x = x, 
                          y = y))
  }
}
df$a <- factor(df$a, levels = paste("Shape =", 2^seq(-1, 4)))

ggplot(df, aes(x, y, color = b)) + 
  geom_line() + 
  facet_wrap(vars(a)) +
  coord_cartesian(ylim=c(0, 1)) +
  labs(color = "Scale") +
  xlab("Years") +
  ylab("Proportion without event") +
  ggtitle("Weibull distributions by shape and scale")

```

## Calibration

Why calibrate? How?

Visualize calibration targets and default model

```{r}
# Load calibration targets
true_prevalence <- read.csv(file = 'data/prevalence_asymptomatic_cancer.csv')
true_incidence <- read.csv(file = 'data/incidence_symptomatic_cancer.csv')
true_stage_distr <- read.csv(file = 'data/stage_distr.csv')
l_calib_targets <- list(prevalence = true_prevalence,
                        incidence = true_incidence,
                        stage_distr = true_stage_distr)

# Summarize LHS calibration targets
load('data/calibration_sample.RData')

# Plot outputs
plot_priors <- calc_and_plot_calib_targets(l_params_all, 
                                           l_calib_targets,
                                           out_calib_targets, 
                                           return_data = FALSE)


(plot_priors$prevalence + plot_priors$incidence + plot_priors$stage_distr) + 
  plot_layout(
    ncol = 3,
    guides = "collect"
  ) + plot_annotation(title = 'Calibration targets') &
  theme(legend.position = 'bottom')

# @@@ can remove age 80+ from screening prevalence
```

The black dots are the true targets with 95% confidence intervals. The gray shaded areas are the regions covered by the 95% quantile range of the Latin hypercube sample of parameters generated for BayCANN.

How would you describe the fit of the uncalibrated priors to the calibration targets?

```{r}

```

## IMABC

```{r}

```

### BayCANN: Bayesian Calibration with Artificial Neural Network

```{r}
# Generate BayCANN sample
```

Visualize results and compare to before calibration

[@Rutter2019]
