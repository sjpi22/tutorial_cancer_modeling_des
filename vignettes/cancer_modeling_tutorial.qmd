---
title: "Cancer microsimulation modeling tutorial: Discrete event simulation, calibration, evaluation of alternative strategies, and validation"
format: html
editor: visual
bibliography: references.bib
---

::: panel-tabset
## Model schema

![Cancer natural history model schema](figures/model_schema.png)

## Setup

### Load packages

```{r, message=FALSE, warning=FALSE}

# Run this once
# install.packages("devtools")
# devtools::install_github("carolyner/imabc")

# Clear workspace
rm(list = ls())

# Options
options(scipen=999)

# Load packages
library(readxl)
library(data.table)
library(tidyverse)
library(patchwork)
library(survival)
library(imabc)
library(keras)
library(doBy)
library(GGally)

# Load functions
distr.sources <- list.files("R", 
                            pattern="*.R$", full.names=TRUE, 
                            ignore.case=TRUE, recursive = TRUE)
sapply(distr.sources, source, .GlobalEnv)
```

### Load default parameters

```{r}
# Load default parameters
l_params_all <- load_default_params()

# Make cohort small for testing
l_params_all <- update_param_list(l_params_all,
                                  list(n_cohort = 10000,
                                       v_strats = l_params_all$v_strats[1]))
```

### Visualize data inputs

Background mortality and survival from diagnosis

```{r}
# Background mortality
n_mort_ages <- length(l_params_all$time_H_Do_female$params$xs)
df_mort <- data.frame(sex = c(rep("Female", n_mort_ages),
                              rep("Male", n_mort_ages)),
                      yrs = c(l_params_all$time_H_Do_female$params$xs,
                              l_params_all$time_H_Do_male$params$xs),
                      prob = c(1 - c(0, cumsum(l_params_all$time_H_Do_female$params$probs[-n_mort_ages])),
                               1 - c(0, cumsum(l_params_all$time_H_Do_male$params$probs[-n_mort_ages])))
)

plot_mort <- ggplot(df_mort, aes(yrs, prob, color = sex)) + 
  geom_line() + 
  theme_minimal() +
  coord_cartesian(ylim=c(0, 1)) +
  labs(title = "Background mortality",
       x = "Years from birth",
       y = "Proportion alive",
       color = "Sex")

# Survival after diagnosis
df_surv <- data.frame()
for (stg in l_params_all$v_cancer) {
  var <- paste0("time_C", stg, "_Dc")
  n_surv_ages <- length(l_params_all[[var]]$params$xs)
  temp_df_surv <- data.frame(stage = toupper(stg),
                             yrs = l_params_all[[var]]$params$xs,
                             prob = 1 - c(0, cumsum(l_params_all[[var]]$params$probs[-n_surv_ages])))
    
  df_surv <- rbind(df_surv, temp_df_surv)
}

plot_surv <- ggplot(df_surv, aes(yrs, prob, color = stage)) + 
  geom_line() + 
  geom_point(alpha = 0.7) +
  theme_minimal() +
  coord_cartesian(ylim=c(0, 1)) +
  labs(title = "Survival after diagnosis",
       x = "Years from diagnosis",
       y = "Proportion alive",
       color = "Stage at diagnosis")

# Plot together
(plot_mort + plot_surv) + 
  plot_layout(
    ncol = 2,
    guides = "collect",
    axes = "collect",
    axis_titles = "collect"
  ) + plot_annotation(title = 'Known data inputs') &
  theme(legend.position = 'bottom')
```

## Calibration

::: panel-tabset
### Setup

#### Load priors

```{r}
# Load priors
param_map <- make_param_map(l_params_all)
prior_path <- 'data/priors.rds'
prior_map <- readRDS(prior_path)
```

#### Visualize calibration targets and prior outputs

The black dots are the true targets with 95% confidence intervals. The gray shaded areas are the regions covered by the entire range of the Latin hypercube sample of parameters generated for BayCANN.

```{r}
# Load calibration targets
true_prevalence <- read.csv(file = 'data/prevalence_asymptomatic_cancer.csv')
true_incidence <- read.csv(file = 'data/incidence_symptomatic_cancer.csv')
true_stage_distr <- read.csv(file = 'data/stage_distr.csv')
l_true_targets <- list(prevalence = true_prevalence,
                        incidence = true_incidence,
                        stage_distr = true_stage_distr)

# Summarize calibration outputs generated from LHS sample of priors
load('data/BayCANN_sample.RData')
out_calib_targets <- data.frame(out_calib_targets)
out_calib_targets <- matrix(0, nrow = 3, ncol = nrow(l_true_targets$prevalence) + nrow(l_true_targets$incidence) + nrow(l_true_targets$stage_distr))

plot_priors <- calc_and_plot_calib_targets(l_true_targets, 
                                           out_calib_targets,
                                           titles = list(prevalence = 'Prevalence',
                                                         incidence = 'Incidence',
                                                         stage_distr = 'Stage distribution'))

(plot_priors$prevalence + plot_priors$incidence + plot_priors$stage_distr) + 
  plot_layout(
    ncol = 3,
    guides = "collect"
  ) + plot_annotation(title = 'Calibration targets') &
  theme(legend.position = 'bottom')
```

### IMABC

Incremental mixture approximate Bayesian calibration [@Rutter2019]

\@\@\@ TO DO: Update target plots, make numbers more consistent \@\@\@ TODO: Check BayCANN: check if STAN priors are actually uniform \@\@ journal ideas

#### Run algorithm

\[External step\] 1. Run analysis/run_IMABC.R

#### Load IMABC outputs

```{r}
# File paths 
# path_imabc <- "output/IMABC/IMABC_calibration.rds"
path_imabc <- "alternate_versions/simplified/output/imabc/IMABC_calibration.RData"

# Set random seed
set.seed(l_params_all$seed)

# Reshape true targets and get mapping
l_true_reshaped <- reshape_calib_targets(l_true_targets, output_se = TRUE, output_map = TRUE)

# Load IMABC results
load(path_imabc)

# Load true parameters (unknown in real life!)
true_params <- readRDS("ground_truth/true_param_map.rds") # Output: param_map

# Load priors
# prior_map <- readRDS("data/priors.rds")
load("alternate_versions/simplified/data/priors.RData")

# Sample with replacement
n_imabc_sample <- nrow(calibration_results$good_parm_draws) * 100
indices_imabc_sample <- sample(1:nrow(calibration_results$good_parm_draws), 
                               n_imabc_sample, 
                               replace = TRUE, 
                               prob = calibration_results$good_parm_draws$sample_wt)
```

#### Plot parameters

IMABC distribution in gray, true parameters in red, uniform range of priors in blue

```{r}
# IMABC posterior parameters
imabc_params_unweighted <- calibration_results$good_parm_draws %>%
  dplyr::select(prior_map$var_id)

imabc_params <- imabc_params_unweighted[indices_imabc_sample, ]

imabc_params_long <- imabc_params %>%
  pivot_longer(everything())

# Correction for new names for param_map
true_params$var_id <- prior_map$var_id

# Plot IMABC parameters against true parameters and priors
plot_params_imabc <- ggplot(imabc_params_long, aes(value)) + 
  geom_histogram() + 
  geom_vline(data = true_params %>%
               rename(name = var_id), aes(xintercept=param_val), color = 'red') +
  geom_vline(data = prior_map %>%
               rename(name = var_id), aes(xintercept=prior_min), color = 'blue') +
  geom_vline(data = prior_map %>%
               rename(name = var_id), aes(xintercept=prior_max), color = 'blue') +
  facet_wrap(~name, scales = "free") +
  ggtitle('IMABC')

plot_params_imabc
```

#### Plot calibration targets

```{r}

# Get vector of ages for prevalence and incidence
v_ages_prevalence <- get_age_range(l_true_targets$prevalence)
v_ages_incidence <- get_age_range(l_true_targets$incidence)
v_ages <- list(prevalence = v_ages_prevalence,
               incidence = v_ages_incidence)

# Rerun model with posterior parameter sample
l_params_all <- update_param_list(l_params_all,
                                  list(n_cohort = 100000))

# Just for simplified/ case
true_params <- readRDS("ground_truth/true_param_map.rds") # Output: param_map
prior_map$var_name <- true_params$var_name
names(imabc_params) <- true_params$var_id

imabc_calib_targets <- data.frame()
for (i in 1:min(nrow(imabc_params), 1000)) {
  
  v_params_update <- as.numeric(imabc_params[i,])
  v_calib_targets <- params_to_calib_targets(l_params_all, v_params_update, prior_map,
                                             v_ages)
  
  imabc_calib_targets <- rbind(imabc_calib_targets, t(v_calib_targets))
}

# Summarize targets
# Note: weight for 50th and 95th with resampling
collapse_mean  <- summaryBy( . ~ index , FUN=c(mean), data=imabc_calib_targets, keep.names=TRUE)
collapse_UB_95 <- summaryBy( . ~ index , FUN=quantile, probs = 0.975, data=imabc_calib_targets, keep.names=TRUE)
collapse_LB_95 <- summaryBy( . ~ index , FUN=quantile, probs = 0.025, data=imabc_calib_targets, keep.names=TRUE)
collapse_UB_50 <- summaryBy( . ~ index , FUN=quantile, probs = 0.75, data=imabc_calib_targets, keep.names=TRUE)
collapse_LB_50 <- summaryBy( . ~ index , FUN=quantile, probs = 0.25, data=imabc_calib_targets, keep.names=TRUE)

out_summary <-  data.frame(l_true_reshaped$target_map,
                           true_val = l_true_reshaped$v_targets,
                           true_se = l_true_reshaped$v_se,
                           model_mean = unname(t(collapse_mean)),
                           model_UB_95 = unname(t(collapse_UB_95)),
                           model_LB_95 = unname(t(collapse_LB_95)),
                           model_UB_50 = unname(t(collapse_UB_50)),
                           model_LB_50 = unname(t(collapse_LB_50))) %>%
  mutate(categorical = (target_groups %in% c('Stage at diagnosis', 'Prevalence of lesion type b')))

# Plot 
plot_targets_imabc <- ggplot(data = out_summary, 
               aes(x    = target_index, 
                   y    = true_val, 
                   ymin = true_val - true_se, 
                   ymax = true_val + true_se))+ 
  geom_errorbar(width=.4, size=0.9, color="red") +
  theme(legend.position="none") +
  geom_errorbar(data = out_summary[out_summary$categorical==1,],
                aes(x    = target_index-0.07,
                    y    = model_mean,
                    ymin = model_LB_95,
                    ymax = model_UB_95),width=.4, size=0.7, color="black", alpha = 0.7, position = "dodge2") +
  geom_ribbon(data = out_summary[out_summary$categorical==0,],
              aes(x    = target_index,
                  y    = true_val,
                  ymin = model_LB_95,
                  ymax = model_UB_95),
              fill = "black",
              alpha = 0.3) +
  geom_ribbon(data = out_summary[out_summary$categorical==0,],
              aes(x    = target_index,
                  y    = true_val,
                  ymin = model_LB_50,
                  ymax = model_UB_50),
              fill = "black",
              alpha = 0.5) +
  facet_wrap(~ target_groups,scales="free", ncol = 3) +
  theme(
    strip.background = element_blank(),
    strip.text.x = element_blank(), legend.position="none") +
  scale_fill_manual(values = c("grey10", "grey30"))+
  scale_y_continuous(breaks = number_ticks(5))+
  theme_bw(base_size = 23) +
  theme(plot.title = element_text(size = 22, face = "bold"),
        axis.text.x = element_text(size = 12, angle = 90),
        axis.text.y = element_text(size = 12),
        axis.title = element_text(size = 18),
        panel.grid.major = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA),
        strip.background = element_blank(),
        strip.text = element_text(hjust = 0)) +
  labs(title = "IMABC calibration", 
       x     = "", y     = "")

plot_targets_imabc
```

### BayCANN

Bayesian Calibration with Artificial Neural Network [@Jalal2021]

#### Run algorithm

\[External step\]

1.  Run analysis/generate_BayCANN_sample.R to generate training and testing sample of parameters and outputs for ANN
2.  Run analysis/run_BayCANN.R to train ANN and generate parameter posteriors with STAN
3.  Run analysis/get_BayCANN_outputs.R to get calibration outputs

#### Load BayCANN outputs

```{r}
# File paths
path_baycann_post <- "output/calibrated_posteriors_BayCANN.csv"
path_baycann_target <- "output/calibration_targets_BayCANN.csv"

# Load BayCANN calibration outputs
baycann_posteriors <- read_csv(path_baycann_post) %>%
  dplyr::select(-lp)
baycann_targets <- read_csv(path_baycann_target)

# Rename posterior columns and create long df
names(baycann_posteriors) <- prior_map$var_id

baycann_posteriors_long <- baycann_posteriors %>%
  pivot_longer(everything())


```

#### Plot parameters

```{r}
# Plot BayCANN parameters against true parameters and priors
plot_params_baycann <- ggplot(baycann_posteriors_long, aes(value)) + 
  geom_histogram() + 
  geom_vline(data = param_map %>%
               rename(name = var_id), aes(xintercept=param_val), color = 'red') +
  geom_vline(data = prior_map %>%
               rename(name = var_id), aes(xintercept=prior_min), color = 'blue') +
  geom_vline(data = prior_map %>%
               rename(name = var_id), aes(xintercept=prior_max), color = 'blue') +
  facet_wrap(~name, scales = "free") +
  ggtitle('BayCANN')

plot_params_baycann
```

#### Plot calibration targets

```{r}
# Summarize targets
collapse_mean_bc  <- summaryBy( . ~ index , FUN=c(mean), data=baycann_targets,keep.names=TRUE)
collapse_UB_95_bc <- summaryBy( . ~ index , FUN=quantile, probs = 0.975, data=baycann_targets, keep.names=TRUE)
collapse_LB_95_bc <- summaryBy( . ~ index , FUN=quantile, probs = 0.025, data=baycann_targets, keep.names=TRUE)
collapse_UB_50_bc <- summaryBy( . ~ index , FUN=quantile, probs = 0.75, data=baycann_targets, keep.names=TRUE)
collapse_LB_50_bc <- summaryBy( . ~ index , FUN=quantile, probs = 0.25, data=baycann_targets, keep.names=TRUE)

out_summary_bc <-  data.frame(l_true_reshaped$target_map,
                           true_val = l_true_reshaped$v_targets,
                           true_se = l_true_reshaped$v_se,
                           model_mean = unname(t(collapse_mean_bc)),
                           model_UB_95 = unname(t(collapse_UB_95_bc)),
                           model_LB_95 = unname(t(collapse_LB_95_bc)),
                           model_UB_50 = unname(t(collapse_UB_50_bc)),
                           model_LB_50 = unname(t(collapse_LB_50_bc))) %>%
  mutate(categorical = (target_groups %in% c('Stage at diagnosis', 'Prevalence of lesion type b')))

# Plot 
plot_targets_baycann <- ggplot(data = out_summary_bc, 
                aes(x    = target_index, 
                    y    = true_val, 
                    ymin = true_val - true_se, 
                    ymax = true_val + true_se))+ 
  geom_errorbar(width=.4, size=0.9, color="red") +
  theme(legend.position="none") +
  geom_errorbar(data = out_summary_bc[out_summary_bc$categorical==1,],
                aes(x    = target_index-0.07,
                    y    = model_mean,
                    ymin = model_LB_95,
                    ymax = model_UB_95),width=.4, size=0.7, color="black", alpha = 0.7, position = "dodge2") +
  geom_ribbon(data = out_summary_bc[out_summary_bc$categorical==0,],
              aes(x    = target_index,
                  y    = true_val,
                  ymin = model_LB_95,
                  ymax = model_UB_95),
              fill = "black",
              alpha = 0.3) +
  geom_ribbon(data = out_summary_bc[out_summary_bc$categorical==0,],
              aes(x    = target_index,
                  y    = true_val,
                  ymin = model_LB_50,
                  ymax = model_UB_50),
              fill = "black",
              alpha = 0.5) +
  facet_wrap(~ target_groups,scales="free", ncol = 3) +
  theme(
    strip.background = element_blank(),
    strip.text.x = element_blank(), legend.position="none") +
  scale_fill_manual(values = c("grey10", "grey30"))+
  scale_y_continuous(breaks = number_ticks(5))+
  theme_bw(base_size = 23) +
  theme(plot.title = element_text(size = 22, face = "bold"),
        axis.text.x = element_text(size = 12, angle = 90),
        axis.text.y = element_text(size = 12),
        axis.title = element_text(size = 18),
        panel.grid.major = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA),
        strip.background = element_blank(),
        strip.text = element_text(hjust = 0)) +
  labs(title = "BayCANN calibration", 
       x     = "", y     = "")

plot_targets_baycann
```
:::
:::

## 
